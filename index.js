// Generated by CoffeeScript 1.3.3
(function() {
  var log, _Logger, _debug,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = function(prefix, source, message, e) {
    var dateStr, n;
    n = new Date();
    dateStr = "" + (n.getFullYear()) + "-" + (n.getMonth() + 1) + "-" + (n.getDate()) + " " + (n.getHours()) + ":" + (n.getMinutes()) + ":" + (n.getSeconds()) + "." + (n.getMilliseconds());
    if (typeof console !== "undefined" && console !== null) {
      console.log("" + source + " :: " + dateStr + " :: " + (prefix.toUpperCase()) + " :: " + message);
    }
    if (e) {
      return typeof console !== "undefined" && console !== null ? console.log(e.toString()) : void 0;
    }
  };

  exports.getLogger = function(source) {
    source = source.indexOf("/" > 0) ? source.split("/").pop() : source;
    return new _Logger(source);
  };

  _debug = false;

  _Logger = (function() {

    function _Logger(source) {
      this.source = source;
      this.errorCB = __bind(this.errorCB, this);

      this.debug = __bind(this.debug, this);

      this.notice = __bind(this.notice, this);

      this.info = __bind(this.info, this);

      this.error = __bind(this.error, this);

    }

    _Logger.prototype.error = function(message, e) {
      return log("ERROR", this.source, message, e);
    };

    _Logger.prototype.info = function(message) {
      return log("INFO", this.source, message, null);
    };

    _Logger.prototype.notice = function(message) {
      return log("NOTICE", this.source, message, null);
    };

    _Logger.prototype.debug = function(message) {
      if (_debug) {
        return log("DEBUG", this.source, message, null);
      }
    };

    _Logger.prototype.errorCB = function(message, callback) {
      this.error(message);
      return callback(message);
    };

    return _Logger;

  })();

  exports.toggleDebug = function(isOverride) {
    if (isOverride != null) {
      return _debug = isOverride;
    } else if (_debug) {
      return _debug = false;
    } else {
      return _debug = true;
    }
  };

}).call(this);
